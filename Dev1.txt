git push -u origin Dev1
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 10 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 504 bytes | 504.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
remote: 
remote: Create a pull request for 'Dev1' on GitHub by visiting:
remote:      https://github.com/davidtoby/git_practice/pull/new/Dev1
remote: 
To github.com:davidtoby/git_practice.git
 * [new branch]      Dev1 -> Dev1
branch 'Dev1' set up to track 'origin/Dev1'.



  - git clone: Creates a local copy of a remote.
  - git remote -v: Lists a Git project’s remotes.
  - git fetch: Fetches work from the remote into the local copy.
  - git merge origin/master: Merges origin/master into your local branch.
  - git push origin <branch_name>: Pushes a local branch to the origin remote.


#Pull Request
git add .

git commit -m "add-one-more-reference-URL"
[Dev1 68248af] add-one-more-reference-URL
 1 file changed, 1 insertion(+)

git_practice % git remote
origin

git push origin Dev1
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 10 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 373 bytes | 373.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:davidtoby/git_practice.git
   2c532de..68248af  Dev1 -> Dev1


Git 分支合并回主分支的过程可以通过以下步骤实现：

假设有一个主分支 master 和一个功能分支 feature，你想要将 feature 分支的更改合并到 master 分支。

确保 master 分支是最新的。在本地克隆仓库中，使用 git checkout master 命令切换到 master 分支。
使用 git pull 命令拉取远程 master 分支的最新更改。
使用 git merge feature 命令将 feature 分支的更改合并到当前的 master 分支。
如果没有冲突，Git 会自动进行合并。如果存在冲突，你需要手动解决冲突，然后将解决冲突后的文件添加到暂存区，并提交更改。
使用 git push 命令将合并后的 master 分支推送到远程仓库。
这样，feature 分支的更改就被成功合并到了 master 分支。

